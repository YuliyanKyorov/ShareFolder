1. ipr - int name = int.Parse(Console.ReadLine());  // нов int чакащ вход от потребителя
2. ca -  type[] name  = new type[size];    // създава нов празен масив
3. cl  - List<type> name = new List<type>(); //  създава нов лист от  вид променлива
4. str - string name = Console.ReadLine();  //  нов стринг чакащ вход от usera
5. crs - string[] name = Console.ReadLine() .Split(", "); Console.ReadLine() // Чете вход от конзолата като низ (string).
.Split(", ") – Разделя прочетения низ на поднизове, използвайки ", " (запетая и интервал) като разделител.
string[] name – Декларира масив от низове (string[]), който ще съдържа резултатите от разделянето.
6. ssa - int[] numbers = Console.ReadLine().Split(", ").Select(int.Parse).ToArray();//Чете входа като низ (string).
.Split(", ") – Разделя низа на части, използвайки ", " (запетая и интервал) като разделител.
.Select(int.Parse) – Преобразува всеки елемент от масива (който е string) в цяло число (int).
.ToArray() – Преобразува резултата обратно в масив от цели числа (int[]).
7. ssl - List<int> numbers = Console.ReadLine() .Split(", ") .Select(int.Parse) .ToList();//Чете входа като низ (string).
.Split(", ") – Разделя прочетения низ на поднизове, използвайки ", " (запетая и интервал) като разделител.
.Select(int.Parse) – Преобразува всеки подниз в цяло число (int).
.ToList() – Преобразува резултата в списък от цели числа (List<int>)
8. sysypm - namespace ConsoleApp1 { internal class Program { static void Main(string[] args) { }}//namespace ConsoleApp1
Дефинира пространство от имена (namespace), което групира класове и други типове. ConsoleApp1 е името на пространството, което обикновено съвпада с името на проекта.internal class Program Дефинира клас с име Program.Модификаторът internal означава, че този клас е достъпен само в рамките на същия проект. static void Main(string[] args) Това е главният метод (Main), който се изпълнява първи при стартиране на програмата.
string[] args – Това е масив от аргументи, които могат да се подават от командния ред.void – Методът няма връщана стойност. Тяло на метода { }
9. cr - Console.ReadLine();// четене на вход от конзолата като низ (string).
10. Създаване на нов обект=== no-
MyClass myObject = new MyClass();

11. Инициализация на списък===nl-
List<int> numbers = new List<int>() { 1, 2, 3, 4, 5 };

12. Преминаване през списък с foreach цикъл===fcw-
foreach (int number in numbers)
{
    Console.WriteLine(number);
}

13. Добавяне на елемент към списък===adi-
numbers.Add(0);

14. Премахване на елемент от списък===rmi-
numbers.Remove(0);

15. Проверка дали списък съдържа определен елемент===bol-
bool containsNumber = numbers.Contains(4);

16. Сортиране на списък===sl-
numbers.Sort();

17. Обръщане на реда на елементите в списък===rl-
numbers.Reverse();

18. Филтриране на списък с LINQ===fl-
var evenNumbers = numbers.Where(n => n % 2 == 0).ToList();

19. Групиране на елементи по критерий===ig-
var groupedByRemainder = numbers.GroupBy(n => n % 3);

20. Обединяване на два списъка===l-l
List<int> moreNumbers = new List<int>() { 7, 8, 9 };
var combinedList = numbers.Concat(moreNumbers).ToList();

21. Използване на анонимни методи===anm-
Action<string> printString = delegate (string s) { Console.WriteLine(s); };
printString("Hello, world!");

22. Използване на ламбда изрази===lax-
Func<int, int> square = x => x * x;
int result = square(5);

23. Работа с речници (Dictionary)===dic-
Dictionary<string, int> ages = new Dictionary<string, int>()
{
    {"John", 25},
    {"Jane", 30}
};
24. Достъп до стойност в речник===acd-
int johnsAge = ages["John"];

25. Добавяне на нова двойка ключ-стойност в речник===ank-
ages.Add("Alice", 28);

26. Проверка дали речник съдържа определен ключ===cnk-
bool hasKey = ages.ContainsKey("Bob");

27. Премахване на елемент от речник===rmi-
ages.Remove("John");

28. Използване на try-catch блокове за обработка на изключения===utc-
try
{
    // Код, който може да хвърли изключение
}
catch (Exception ex)
{
    Console.WriteLine($"Възникна грешка: {ex.Message}");
}
finally
{
    // Код, който винаги се изпълнява независимо от изключението
}

29. Използване на using за автоматично освобождаване на ресурси===ua-
using (StreamWriter writer = new StreamWriter("example.txt"))
{
    writer.WriteLine("This is an example.");
}
